#!groovy

// "Constants"
String getApplication() { 'spring-petclinic-plain' }
String getConfigRepositoryPRRepo() { 'argocd/gitops' }
String getScmManagerCredentials() { 'scmm-user' }
String getConfigRepositoryPRBaseUrl() { env.SCMM_URL }
String getDockerRegistryBaseUrl() { env.REGISTRY_URL }
String getDockerRegistryPath() { env.REGISTRY_PATH }
String getDockerRegistryCredentials() { 'registry-user' }
String getCesBuildLibRepo() { "${env.SCMM_URL}/repo/common/ces-build-lib" }
String getCesBuildLibVersion() { '1.48.0' }
String getGitOpsBuildLibRepo() { "${env.SCMM_URL}/repo/common/gitops-build-lib" }
String getGitOpsBuildLibVersion() { '0.1.3'}

loadLibraries()

properties([
        // Don't run concurrent builds, because the ITs use the same port causing random failures on concurrent builds.
        disableConcurrentBuilds()
])

node {

    mvn = cesBuildLib.MavenWrapper.new(this)

    catchError {

        stage('Checkout') {
            checkout scm
        }

        stage('Build') {
            // Build and tests skipped for faster demo and exercise purposes
            //mvn 'clean package -DskipTests'
            //archiveArtifacts artifacts: '**/target/*.jar'
        }

        stage('Test') {
            // Build and tests skipped for faster demo and exercise purposes
            //mvn 'test -Dmaven.test.failure.ignore=true'
        }

        String imageName = ""
        stage('Docker') {
            String imageTag = createImageTag()
            String pathPrefix = !dockerRegistryPath?.trim() ? "" : "${dockerRegistryPath}/"
            imageName = "${dockerRegistryBaseUrl}/${pathPrefix}${application}:${imageTag}"
            mvn "spring-boot:build-image -DskipTests -Dspring-boot.build-image.imageName=${imageName} " +
                    // Pin builder image for reproducible builds. Update here to get newer JDK minor versions.
                    "-Dspring-boot.build-image.builder=paketobuildpacks/builder:0.1.185-base "

            if (isBuildSuccessful()) {
                def docker = cesBuildLib.Docker.new(this)
                docker.withRegistry("http://${dockerRegistryBaseUrl}", dockerRegistryCredentials) {
                    def image = docker.image(imageName)
                    image.push()
                }
            } else {
                echo 'Skipping docker push, because build not successful'
            }
        }

        stage('Deploy') {
            if (isBuildSuccessful() && env.BRANCH_NAME in ['main']) {

                def gitopsConfig = [
                        scm: [
                                provider     : 'SCMManager',
                                credentialsId: scmManagerCredentials,
                                baseUrl      : configRepositoryPRBaseUrl,
                                repositoryUrl   : configRepositoryPRRepo,
                        ],
                        application: application,
                        gitopsTool: 'ARGO',
                        deployments: [
                                sourcePath: 'k8s',
                                plain: [
                                        updateImages: [
                                                [ filename: 'deployment.yaml',
                                                  containerName: application,
                                                  imageName: imageName ]
                                        ]
                                ]
                        ],
                        fileConfigmaps: [
                                // Showcase for gitops-build-lib: Convert file into a config map
                                [
                                        name : 'messages',
                                        sourceFilePath : '../src/main/resources/messages/messages.properties',
                                        stage: ['staging', 'production']
                                ]
                        ],
                        stages: [
                                staging: [
                                        namespace: 'argocd-staging',
                                        deployDirectly: true ],
                                production: [
                                        namespace: 'argocd-production',
                                        deployDirectly: false ],
                        ]
                ]
                addSpecificGitOpsConfig(gitopsConfig)
                
                deployViaGitops(gitopsConfig)
            } else {
                echo 'Skipping deploy, because build not successful or not on main branch'
            }
        }

        stage('Integration') {
            def config = [
                serverUrl: 'localhost:9092',
                serverCredentialsId: 'argocd-user',
                image: 'argoproj/argocd:v2.1.7',
                registryCredentialsId: '',
                application: 'petclinic-plain-staging' // name of the application from the application.yaml,
                dockerExtraArgs: '--network="host"' // need this when starting locally
            ]
            syncAndWait(config)
        }
    }

    // Archive Unit and integration test results, if any
    junit allowEmptyResults: true, testResults: '**/target/failsafe-reports/TEST-*.xml,**/target/surefire-reports/TEST-*.xml'
}

/** Initializations might not be needed in a real-world setup, but are necessary for GitOps playground */
void addSpecificGitOpsConfig(gitopsConfig) {
    gitopsConfig += [
        // In the GitOps playground, we're loading the build libs from our local SCM so it also works in an offline context
        // As the gitops-build-lib also uses the ces-build-lib we need to pass those parameters on.
        // If you can access the internet, you can rely on the defaults, which load the lib from GitHub.
        cesBuildLibRepo: cesBuildLibRepo,
        cesBuildLibVersion: cesBuildLibVersion,
        cesBuildLibCredentialsId: scmManagerCredentials,
        
        
        // The GitOps playground provides parameters for overwriting the build images used by gitops-build-lib, so 
        // it also works in an offline context.
        // Those parameters overwrite the following parameters.
        // If you can access the internet, you can rely on the defaults, which load the images from public registries.
        buildImages          : [
                helm: 'ghcr.io/cloudogu/helm:3.5.4-1',
                kubectl: 'lachlanevenson/k8s-kubectl:v1.19.3',
                kubeval: 'ghcr.io/cloudogu/helm:3.5.4-1',
                helmKubeval: 'ghcr.io/cloudogu/helm:3.5.4-1',
                yamllint: 'cytopia/yamllint:1.25-0.7'
        ]
    ]
}

String createImageTag() {
    def git = cesBuildLib.Git.new(this)
    String branch = git.simpleBranchName
    String branchSuffix = ""

    if (!"develop".equals(branch)) {
        branchSuffix = "-${branch}"
    }

    return "${new Date().format('yyyyMMddHHmm')}-${git.commitHashShort}${branchSuffix}"
}

void syncAndWait(def config) {
    String argocdConfigPath = '/tmp/.argocd/config' // set config path to tmp, because of folder permissions
    withDockerImage(config) {
        withCredentials([usernamePassword(credentialsId: config.serverCredentialsId, passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME')]) {
            sh "argocd login ${config.server} --username ${USERNAME} --password ${PASSWORD} --insecure --config ${argocdConfigPath}"
        }
        sh "argocd app sync ${config.application} --prune --async --config ${argocdConfigPath}"
        sh "argocd app wait ${config.application} --config ${argocdConfigPath}"
    }
}

void withDockerImage(def config, Closure body) {
    if(config.containsKey('credentialsId') && config.credentialsId) {
        def registryUrl = getRegistryUrlFromImage(config.image)
        docker.withRegistry("https://${registryUrl}", config.credentialsId) {
            runDockerImage(config.image, body)
        }
    } else {
        runDockerImage(config.image, body)
    }
}

String getRegistryUrlFromImage(String image) {
    int i = image.lastIndexOf('/')
    return  image.substring(0, i)
}

void runDockerImage(String image, Closure body) {
    docker.image(image).inside(
        // Allow accessing WORKSPACE even when we are in a child dir (using "dir() {}")
        "${pwd().equals(env.WORKSPACE) ? '' : "-v ${env.WORKSPACE}:${env.WORKSPACE} "}" +
            // Avoid: "ERROR: The container started but didn't run the expected command"
            '--entrypoint=""' +
            " ${config.dockerExtraArgs}"
    ) {
        body()
    }
}

def loadLibraries() {
    // In the GitOps playground, we're loading the build libs from our local SCM so it also works in an offline context
    // If you can access the internet, you could also load the libraries directly from github like so
    // @Library(["github.com/cloudogu/ces-build-lib@${cesBuildLibVersion}", "github.com/cloudogu/gitops-build-lib@${gitOpsBuildLibRepo}"]) _
    //import com.cloudogu.ces.cesbuildlib.*
    //import com.cloudogu.ces.gitopsbuildlib.*
    
    cesBuildLib = library(identifier: "ces-build-lib@${cesBuildLibVersion}",
            retriever: modernSCM([$class: 'GitSCMSource', remote: cesBuildLibRepo, credentialsId: scmManagerCredentials])
    ).com.cloudogu.ces.cesbuildlib

    library(identifier: "gitops-build-lib@${gitOpsBuildLibVersion}",
            retriever: modernSCM([$class: 'GitSCMSource', remote: gitOpsBuildLibRepo, credentialsId: scmManagerCredentials])
    ).com.cloudogu.gitops.gitopsbuildlib
}

def cesBuildLib
def gitOpsBuildLib
